'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactInterval = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactInterval = exports.ReactInterval = function (_React$Component) {
  _inherits(ReactInterval, _React$Component);

  function ReactInterval() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactInterval);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactInterval.__proto__ || Object.getPrototypeOf(ReactInterval)).call.apply(_ref, [this].concat(args))), _this), _this.callback = function () {
      if (_this.timer) {
        _this.props.callback();
        _this.start();
      }
    }, _this.start = function () {
      _this.stop();
      _this.timer = setTimeout(_this.callback, _this.props.timeout);
    }, _this.stop = function () {
      clearTimeout(_this.timer);
      _this.timer = null;
    }, _this.render = function () {
      return false;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactInterval, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.enabled) {
        this.start();
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(_ref2) {
      var timeout = _ref2.timeout,
          callback = _ref2.callback,
          enabled = _ref2.enabled;

      return this.props.timeout !== timeout || this.props.callback !== callback || this.props.enabled !== enabled;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(_ref3) {
      var enabled = _ref3.enabled;

      if (this.props.enabled !== enabled) {
        if (this.props.enabled) {
          this.start();
        } else {
          this.stop();
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.stop();
    }
  }]);

  return ReactInterval;
}(_react2.default.Component);

ReactInterval.defaultProps = {
  enabled: false,
  timeout: 1000
};